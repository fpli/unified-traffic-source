--------------------------------------------------------------------------------
-- Traffic source detection in unified session - batch pipeline v1
-- t handle t-1 sameday, t-2 crossday
-- https://zeta.dss.vip.ebay.com/zeta/share/#/notebook?notebookId=cc092fd2-0645-4497-b3fd-3e98288c052f
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Spark conf generated by autoetl
--------------------------------------------------------------------------------
-- Original
/*
spark.master=yarn
spark.submit.deployMode=cluster
spark.driver.memory=20g
spark.executor.cores=4
spark.executor.memory=12g
spark.dynamicAllocation.enabled=true
spark.dynamicAllocation.initialExecutors=50
spark.dynamicAllocation.minExecutors=1
spark.sql.shuffle.partitions=1024
spark.sql.parquet.writeLegacyFormat=true
spark.scheduler.listenerbus.eventqueue.size=100000
spark.speculation.multiplier=2
spark.speculation.quantile=0.7
spark.task.maxFailures=2
spark.speculation.interval=5000ms
spark.speculation=true
spark.serializer=org.apache.spark.serializer.KryoSerializer
spark.rdd.compress=true
spark.ui.view.acls=*
spark.ui.view.acls.groups=*
spark.shuffle.service.enabled=true
spark.memory.fraction=0.7
spark.memory.storageFraction=0.7
spark.executor.extraJavaOptions="-XX:ParallelGCThreads=3"
spark.sql.autoBroadcastJoinThreshold=10485760
spark.sql.crossJoin.enabled=true
spark.rpc.numRetries=5
spark.rpc.askTimeout=300s
spark.network.timeout=120s
spark.yarn.executor.memoryOverhead=6g
spark.driver.maxResultSize=2G
*/

-- group and comment
/*
-- cluster manager and deploy
spark.master=yarn
spark.submit.deployMode=cluster

-- executor
spark.driver.memory=20g
spark.driver.maxResultSize=2G
spark.executor.cores=4
spark.executor.memory=12g
spark.executor.extraJavaOptions="-XX:ParallelGCThreads=3"
spark.yarn.executor.memoryOverhead=6g
spark.memory.fraction=0.7
spark.memory.storageFraction=0.7
spark.dynamicAllocation.enabled=true
spark.dynamicAllocation.initialExecutors=50
spark.dynamicAllocation.minExecutors=1

-- shuffle
spark.shuffle.service.enabled=true

-- networking
spark.rpc.numRetries=5
spark.rpc.askTimeout=300s
spark.network.timeout=120s

-- compression and serialization
spark.rdd.compress=true
spark.serializer=org.apache.spark.serializer.KryoSerializer

-- scheduling
-- spark.scheduler.listenerbus.eventqueue.capacity?
spark.scheduler.listenerbus.eventqueue.size=100000
spark.speculation=true
spark.speculation.interval=5000ms
spark.speculation.quantile=0.7
spark.speculation.multiplier=2
spark.task.maxFailures=2

-- sql
spark.sql.shuffle.partitions=1024
spark.sql.parquet.writeLegacyFormat=true
spark.sql.autoBroadcastJoinThreshold=10485760
spark.sql.crossJoin.enabled=true

-- spark ui
spark.ui.view.acls=*
spark.ui.view.acls.groups=*

*/

--------------------------------------------------------------------------------
-- Prepare dt variables
--------------------------------------------------------------------------------
-- e.g.
-- t = UOW_TO_DATE: 20230222
-- t-1 = UOW_FROM_DATE: 20230221
-- t-2: 20230220
--
-- Variables:
-- T, UOW_TO_DATE: 20230222
-- UOW_FROM_DATE: 20230221
-- dt_1: select '${UOW_FROM_DATE}': 20230221
-- dt_1_formated: select to_date('${UOW_FROM_DATE}', 'yyyyMMdd'): 2023-02-21
-- dt_2, select date_format(date_sub(to_date('${UOW_FROM_DATE}','yyyyMMdd'), 1), 'yyyyMMdd'): 20230220
-- dt_2_formated: select date_sub(to_date('${UOW_FROM_DATE}','yyyyMMdd'), 1): 2023-02-20

%refresh_var(${dt_1});
%refresh_var(${dt_1_formated});
%refresh_var(${dt_2});
%refresh_var(${dt_2_formated});

--------------------------------------------------------------------------------
-- [Placeholder] Watch done file
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Make a copy of unified session of t-1 sameday and t-2 crossday
--------------------------------------------------------------------------------
INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_session_snapshot
SELECT *
FROM ubi_t.unified_session a
WHERE ((a.dt = '${dt_1}' AND a.session_type = 'sameday') 
  or (a.dt = '${dt_2}' AND a.session_type = 'crossday'));

--------------------------------------------------------------------------------
-- 1. Prepare unified session events for traffic source detection
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- 1.1 Prepare valid events
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- 1.1.1 prepare surface data
-- only page events, non-native events, non-iframe events
-- source: SURFACE_TRACKING.PAGE_TRACKING_EVENT_VIEW, ACCESS_VIEWS.PAGES, ubi_t.unified_session_map
-- logic:
-- * dt mapping: unified_session_map crossday session in '20230220' 
--   <=> PAGE_TRACKING_EVENT_VIEW dt in ('2023-02-20', '2023-02-21')
-- * ubi_t.unified_session_map has open partition, we'd better not handle open partition 
--   in the first place. Traffic source for open session is not accurate.
-- * T handle T-1 sameday and T-2 crossday
-- * Only page is considered, module is not used: SURFACE_TRACKING.PAGE_TRACKING_EVENT_VIEW
-- * As UBI has the same native events, so ignore them from surface side: a.EXPERIENCE <> 'native'
-- * Get only valid events: b.IFRAME = 0. This is slightly different with UBI
--   as UBI also considers redirect events as invalid. Check later.
--------------------------------------------------------------------------------

INSERT OVERWRITE TABLE ubi_w.tbd_ts_surface_event
SELECT 
  d.global_session_id,
  d.source,
  d.source_session_skey,
  c.*
FROM
  (SELECT 
    GUID, 
    SESSION_ID, 
    a.PAGE_ID, 
    b.PAGE_NAME, 
    EVENT_TIMESTAMP, 
    REFERER
  from SURFACE_TRACKING.PAGE_TRACKING_EVENT_VIEW a
    inner join ACCESS_VIEWS.PAGES b
    on a.dt BETWEEN '${dt_2_formated}' and '${dt_1_formated}' 
      and a.EXPERIENCE <> 'native' 
      and b.IFRAME = 0 
      and a.PAGE_ID = b.PAGE_ID) c
  inner join ubi_t.unified_session_map d
  on ((d.dt = '${dt_1}' AND d.session_type = 'sameday') 
      or (d.dt = '${dt_2}' AND d.session_type = 'crossday'))
    and d.source = 'Surface' 
    and c.guid = d.guid 
    and c.session_id = d.source_session_skey;

--------------------------------------------------------------------------------
-- 1.1.2 Prepare UBI events
-- source: UBI_V.UBI_EVENT, ACCESS_VIEWS.PAGES, ubi_t.unified_session_map
-- logic:
-- * dt mapping: ubi_t.unified_session_map crossday session in '20230220' 
--   <=> UBI_V.UBI_EVENT SESSION_START_DT BETWEEN '2023-02-20' AND '2023-02-21'
--------------------------------------------------------------------------------

INSERT OVERWRITE TABLE ubi_w.tbd_ts_ubi_event
select 
  d.global_session_id, 
  d.source, 
  d.source_session_skey, 
  c.*
from
  (select 
    GUID, 
    SESSION_SKEY, 
    a.PAGE_ID, 
    b.PAGE_NAME, 
    EVENT_TIMESTAMP, 
    coalesce(REFERRER, soj_nvl(soj, 'ref')) as referer
  from UBI_V.UBI_EVENT a
    inner join ACCESS_VIEWS.PAGES b
    on a.SESSION_START_DT BETWEEN '${dt_2_formated}' AND '${dt_1_formated}' 
    and b.IFRAME = 0 
    and a.PAGE_ID = b.PAGE_ID) c
  inner join ubi_t.unified_session_map d
  on ((d.dt = '${dt_1}' AND d.session_type = 'sameday') 
    or (d.dt = '${dt_2}' AND d.session_type = 'crossday')) 
  and d.source = 'Ubi' 
  and c.guid = d.guid 
  and c.session_skey = d.source_session_skey;

--------------------------------------------------------------------------------
-- 1.2.3 prepare first valid event
--------------------------------------------------------------------------------

INSERT OVERWRITE TABLE ubi_w.tbd_ts_first_valid_event
select 
  guid, 
  global_session_id, 
  source, 
  PAGE_ID, 
  PAGE_NAME, 
  EVENT_TIMESTAMP, 
  REFERER
from
  (select 
    *, 
    ROW_NUMBER() OVER (PARTITION BY guid, global_session_id ORDER BY EVENT_TIMESTAMP ASC) AS rk
  from
    (select 
      guid, 
      global_session_id, 
      source, 
      PAGE_ID, 
      PAGE_NAME, 
      CAST(EVENT_TIMESTAMP/1000 as bigint) as EVENT_TIMESTAMP, 
      REFERER 
      from ubi_w.tbd_ts_surface_event 
    union all 
    select 
      guid, 
      global_session_id, 
      source, 
      PAGE_ID, 
      PAGE_NAME, 
      to_unix_timestamp(EVENT_TIMESTAMP) as EVENT_TIMESTAMP, 
      REFERER 
      from ubi_w.tbd_ts_ubi_event))
where rk = 1;

--------------------------------------------------------------------------------
-- 1.2 Prepare UTP events
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- 1.2.1 Prepare all UTP events
-- source: UBI_V.UBI_EVENT, ubi_t.unified_session_map, CHOCO_DATA_V.DW_MPX_ROTATIONS
-- logic:
-- * (PAGE_ID = 2547208 or (PAGE_ID = 2054060 and soj_nvl(soj, 'pnact') = '1'))
-- * CHOCOLATE_PAGE = 2547208
-- * MOBILE_NOTIF_PAGE = 2054060
-- * return chnl, rotid, url, mpx_chnl_id
-- * Note we must cast rotid in soj payload from string to bigint explicitly,
--   otherwise, both side of the join will be cast to double, which leads to multiple rotation_id 
--   matched from CHOCO_DATA_V.DW_MPX_ROTATIONS. The result physical plan is as follows:
--   BroadcastHashJoin [cast(cast(rotid#80 as bigint) as decimal(20,0))], [cast(ROTATION_ID#215 as decimal(20,0))]
--------------------------------------------------------------------------------
INSERT OVERWRITE TABLE ubi_w.tbd_ts_utp_event
select 
  c.*, 
  d.MPX_CHNL_ID
from
  (select 
     b.global_session_id, 
     b.source_session_skey, 
     a.*,
     ROW_NUMBER() OVER (PARTITION BY b.guid, global_session_id ORDER BY EVENT_TIMESTAMP ASC) AS rk
   from
     (select 
        GUID, 
        SESSION_SKEY,  
        to_unix_timestamp(EVENT_TIMESTAMP) as EVENT_TIMESTAMP,  
        case when PAGE_ID = 2547208 then soj_nvl(soj, 'chnl') 
          when PAGE_ID = 2054060 then 'Notification' 
        end as chnl, 
        soj_nvl(soj, 'rotid') as rotid, 
        soj_url_decode_escapes(soj_nvl(soj, 'url_mpre'), '%') as url
      from UBI_V.UBI_EVENT 
      where SESSION_START_DT BETWEEN '${dt_2_formated}' AND '${dt_1_formated}' 
        and (PAGE_ID = 2547208 or (PAGE_ID = 2054060 and soj_nvl(soj, 'pnact') = '1'))) a
     inner join ubi_t.unified_session_map b
     on ((b.dt = '${dt_1}' AND b.session_type = 'sameday') 
         or (b.dt = '${dt_2}' AND b.session_type = 'crossday')) 
       and b.source = 'Ubi' and a.guid = b.guid and a.session_skey = b.source_session_skey) c
  left join CHOCO_DATA_V.DW_MPX_ROTATIONS d
  on c.rk = 1 and cast(c.rotid as bigint) = d.ROTATION_ID;

--------------------------------------------------------------------------------
-- 1.2.2 First UTP event in session
--------------------------------------------------------------------------------
INSERT OVERWRITE TABLE ubi_w.tbd_ts_first_utp_event
select 
  global_session_id, 
  guid, 
  source_session_skey, 
  session_skey, 
  event_timestamp, 
  chnl, 
  rotid, 
  url, 
  mpx_chnl_id 
from ubi_w.tbd_ts_utp_event
where rk = 1;

--------------------------------------------------------------------------------
-- 1.3 prepare IMBD events
-- source: UBI_V.UBI_EVENT, ubi_t.unified_session_map
-- logic:
-- * IMBD_PAGE = 2051248
-- * return the first imbd event
-- * return chnl, mppid
--------------------------------------------------------------------------------

INSERT OVERWRITE TABLE ubi_w.tbd_ts_imbd_event
select *
from
  (select 
     b.global_session_id, 
     b.source_session_skey, 
     a.*,
     ROW_NUMBER() OVER (PARTITION BY b.guid, global_session_id ORDER BY EVENT_TIMESTAMP ASC) AS rk
   from
     (select 
        GUID, 
        SESSION_SKEY,  
        to_unix_timestamp(EVENT_TIMESTAMP) as EVENT_TIMESTAMP,  
        'Organic: IMBD' as chnl, 
        soj_nvl(soj, 'mppid') as mppid
      from UBI_V.UBI_EVENT 
      where SESSION_START_DT BETWEEN '${dt_2_formated}' AND '${dt_1_formated}' 
        and PAGE_ID = 2051248 
        and soj_nvl(soj, 'mppid') is not null and soj_nvl(soj, 'mppid') <> '') a
     inner join ubi_t.unified_session_map b
     on ((b.dt = '${dt_1}' AND b.session_type = 'sameday') 
         or (b.dt = '${dt_2}' AND b.session_type = 'crossday')) 
       and b.source = 'Ubi' and a.guid = b.guid and a.session_skey = b.source_session_skey)
where rk = 1;

--------------------------------------------------------------------------------
-- 2. Detect traffic source based on first valid events, UTP and IMBD events
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- 2.1 UTP traffic source
-- logic:
-- * exclude onsite channels, e.g. message center: b.chnl not in ('26', '27', '30')
-- * ABS(a.event_timestamp - b.event_timestamp) <= 5
--------------------------------------------------------------------------------

CREATE OR REPLACE TEMPORARY VIEW traffic_source_tmp AS
SELECT
  a.global_session_id,
  a.guid,
  a.event_timestamp as session_start_timestamp,
  b.event_timestamp,
  b.chnl,
  b.rotid,
  b.mpx_chnl_id,
  b.url,
  null as mppid,
  a.page_name,
  a.referer
FROM
  ubi_w.tbd_ts_first_valid_event a
  LEFT JOIN ubi_w.tbd_ts_first_utp_event b 
  ON b.chnl not in ('26', '27', '30') 
  and a.global_session_id = b.global_session_id 
  AND a.guid = b.guid
  AND ABS(a.event_timestamp - b.event_timestamp) <= 5;
		
--------------------------------------------------------------------------------
-- 2.2 IMBD traffic source
-- logic:
-- * ABS(a.session_start_timestamp - b.event_timestamp) <= 600
--------------------------------------------------------------------------------
CREATE OR REPLACE TEMPORARY VIEW unified_ts_utp AS
SELECT
  *
FROM
  traffic_source_tmp
WHERE
  chnl IS NOT NULL;

CREATE OR REPLACE TEMPORARY VIEW unified_ts_unknown AS
SELECT
  *
FROM
  traffic_source_tmp
WHERE
  chnl IS NULL;

CREATE OR REPLACE TEMPORARY VIEW unified_ts_imbd AS
SELECT
  a.global_session_id,
  a.guid,
  a.session_start_timestamp,
  b.event_timestamp,
  b.chnl,
  NULL AS rotid,
  NULL AS mpx_chnl_id,
  NULL AS url,
  b.mppid,
  a.page_name,
  a.referer
FROM
  unified_ts_unknown a
  LEFT JOIN ubi_w.tbd_ts_imbd_event b 
  ON a.global_session_id = b.global_session_id AND a.guid = b.guid
    AND ABS(a.session_start_timestamp - b.event_timestamp) <= 600;
	

INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_ts_1
SELECT
  *
FROM
  unified_ts_utp
UNION ALL
SELECT
  *
FROM
  unified_ts_imbd;

--------------------------------------------------------------------------------
-- 2.3 Referer based traffic source
--------------------------------------------------------------------------------
INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_ts_2
SELECT
  global_session_id,
  guid,
  session_start_timestamp,
  event_timestamp,
  rotid,
  mpx_chnl_id,
  url,
  page_name,
  referer,
  CASE
    WHEN chnl IS NOT NULL THEN chnl
    WHEN (
      referer LIKE '%google%' OR referer LIKE '%bing%' OR referer LIKE '%yahoo%' OR referer LIKE '%duckduckgo%' OR referer LIKE '%yandex%'
    )
    AND referer NOT LIKE '%mail%'
    AND page_name != 'Home Page' THEN 'Free: SEO: Natural Search'
    WHEN (
      referer LIKE '%google%' OR referer LIKE '%bing%' OR referer LIKE '%yahoo%' OR referer LIKE '%duckduckgo%' OR referer LIKE '%yandex%'
    )
    AND referer NOT LIKE '%mail%'
    AND page_name = 'Home Page' THEN 'Organic: Nav Search: Free'
    WHEN referer LIKE '%ebay%' THEN 'Organic: Direct: On eBay'
    WHEN (
      referer LIKE '%facebook%' OR referer LIKE '%twitter%' OR referer LIKE '%pinterest%' OR referer LIKE '%instagram%' OR referer LIKE '%linkedin%' OR referer LIKE '%t.co%'
    ) THEN 'Free: Free Social'
    WHEN referer LIKE '%youtube%' THEN 'Free: Free Social'
    WHEN referer LIKE '%mail%' THEN 'Organic: Txn Comms: Webmail w/o tracking'
    WHEN referer IS NULL OR referer = 'null' THEN 'Organic: Direct: No referer'
    WHEN referer IS NOT NULL THEN 'Free: Other'
    ELSE chnl
  END AS chnl
FROM
  ubi_w.tbd_ts_unified_ts_1;

--------------------------------------------------------------------------------
-- 2.4 Generate final result
--------------------------------------------------------------------------------
INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_traffic_source
SELECT
  global_session_id,
  guid,
  CASE
    WHEN chnl = 'Organic: IMBD' OR mpx_chnl_id IN ('23', '15') THEN 'Organic: IMBD'
    WHEN (
      mpx_chnl_id = '2'
      AND url IS NOT NULL
      AND parse_url(url, 'QUERY', 'keyword') LIKE '%ebay%'
    ) OR (mpx_chnl_id = '25') THEN 'Organic: Nav Search: Paid'
    WHEN mpx_chnl_id = '2' THEN 'Paid: Paid Search'
    WHEN mpx_chnl_id = '6' THEN 'Paid: ePN'
    WHEN mpx_chnl_id = '36' THEN 'Free: SEO: Free Feeds'
    WHEN mpx_chnl_id = '1' THEN 'Paid: Display'
    WHEN mpx_chnl_id IN ('33', '35') THEN 'Paid: Paid Social'
    WHEN chnl = '16' THEN 'Free: Free Social'
    WHEN chnl = '7' THEN 'Organic: Txn Comms: Site Email'
    WHEN chnl = '24' THEN 'Free: Mktg Comms: SMS'
    WHEN chnl = '8' THEN 'Free: Mktg Comms: Mktg Email'
    WHEN chnl = '29' THEN 'Organic: Txn Comms: Customer Service Email'
    WHEN chnl = '1' THEN 'Paid: ePN'
    WHEN chnl = '28' THEN 'Free: SEO: Free Feeds'
    WHEN chnl = '4' THEN 'Paid: Display'
	WHEN chnl = '2' THEN 'Paid: Paid Search'
    ELSE chnl
  END AS traffic_source,
  session_start_timestamp,
  event_timestamp,
  rotid,
  mpx_chnl_id,
  url,
  page_name,
  referer
FROM
  ubi_w.tbd_ts_unified_ts_2;

--------------------------------------------------------------------------------
-- Write traffic source to a temp table before writing to the target table
--------------------------------------------------------------------------------

INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_session_with_ts_snapshot
select
  b.guid,
  b.global_session_id,
  b.abs_start_timestamp,
  b.abs_end_timestamp,
  b.session_start_dt,
  map_filter(
    map('traffic_source_level3', c.traffic_source, 
      'rotid', c.rotid, 
	  'mpx_chnl_id', c.mpx_chnl_id,
	  'page_name', c.page_name,
	  'referer', sojlib.soj_get_url_domain(c.referer)),
	(k, v) -> v is not null and v <> 'null') traffic_source,
  b.bot_flag,
  b.others,
  b.bot_type,
  b.dt,
  b.data_type,
  b.session_type
from 
  (select * from ubi_w.tbd_ts_unified_session_snapshot a 
  where ((a.dt = '${dt_1}' AND a.session_type = 'sameday') 
      or (a.dt = '${dt_2}' AND a.session_type = 'crossday'))) b
  left join ubi_w.tbd_ts_unified_traffic_source c 
  on b.guid = c.guid and b.global_session_id = c.global_session_id;


--------------------------------------------------------------------------------
-- Before write to target table
-- We use ubi_w.tbd_ts_unified_session_with_ts as backup for debug
--------------------------------------------------------------------------------
INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_session_with_ts 
  PARTITION (dt = '${dt_1}', data_type = 'major', session_type = 'sameday')
SELECT
  guid,
  global_session_id,
  abs_start_timestamp,
  abs_end_timestamp,
  session_start_dt,
  traffic_source,
  bot_flag,
  others,
  bot_type
FROM ubi_w.tbd_ts_unified_session_with_ts_snapshot
WHERE dt = '${dt_1}' and data_type = 'major' and session_type = 'sameday';

INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_session_with_ts 
  PARTITION (dt = '${dt_1}', data_type = 'patch', session_type = 'sameday')
SELECT 
  guid,
  global_session_id,
  abs_start_timestamp,
  abs_end_timestamp,
  session_start_dt,
  traffic_source,
  bot_flag,
  others,
  bot_type
FROM ubi_w.tbd_ts_unified_session_with_ts_snapshot
WHERE dt = '${dt_1}' and data_type = 'patch' and session_type = 'sameday';

INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_session_with_ts 
  PARTITION (dt = '${dt_2}', data_type = 'major', session_type = 'crossday')
SELECT
  guid,
  global_session_id,
  abs_start_timestamp,
  abs_end_timestamp,
  session_start_dt,
  traffic_source,
  bot_flag,
  others,
  bot_type
FROM ubi_w.tbd_ts_unified_session_with_ts_snapshot
WHERE dt = '${dt_2}' and data_type = 'major' and session_type = 'crossday';

INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_session_with_ts 
  PARTITION (dt = '${dt_2}', data_type = 'patch', session_type = 'crossday')
SELECT
  guid,
  global_session_id,
  abs_start_timestamp,
  abs_end_timestamp,
  session_start_dt,
  traffic_source,
  bot_flag,
  others,
  bot_type
FROM ubi_w.tbd_ts_unified_session_with_ts_snapshot
WHERE dt = '${dt_2}' and data_type = 'patch' and session_type = 'crossday';

-- ubi_w.tbd_ts_unified_session_with_ts as backup for debug
INSERT OVERWRITE TABLE ubi_w.tbd_ts_unified_session_with_ts
SELECT *
FROM ubi_t.unified_session_swap a
WHERE ((a.dt = '${dt_1}' AND a.session_type = 'sameday') 
  or (a.dt = '${dt_2}' AND a.session_type = 'crossday'));

--------------------------------------------------------------------------------
-- [Placeholder] move unified session with traffic source to target table
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Check before generate done file
--------------------------------------------------------------------------------

select assert_true (a.cnt = b.cnt)
from
  (select count(DISTINCT guid, GLOBAL_SESSION_ID) cnt
   from ubi_t.unified_session
   where ((dt = '${dt_1}' and session_type = 'sameday') 
     or (dt = '${dt_2}' and session_type = 'crossday'))) a
  join
  (select count(DISTINCT guid, GLOBAL_SESSION_ID) cnt
   from ubi_w.tbd_ts_unified_session_snapshot
   where ((dt = '${dt_1}' and session_type = 'sameday') 
     or (dt = '${dt_2}' and session_type = 'crossday'))) b;


--------------------------------------------------------------------------------
-- [Placeholder] Generate done file
--------------------------------------------------------------------------------

